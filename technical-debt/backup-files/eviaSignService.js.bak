import { supabase } from './supabaseClient';
import { sendEmailNotification } from './notificationService';
import { toDatabaseFormat, fromDatabaseFormat } from '../utils/databaseUtils';
import axios from 'axios';

// Note: This is a mock implementation of the Evia Sign API integration
// In a real implementation, this would make actual API calls to the Evia Sign service

// Function to initialize a signing request
export const initializeSigningRequest = async (agreementData) => {
  try {
    // In a real implementation, this would make an API call to Evia Sign
    // For now, we'll simulate by storing the agreement in Supabase
    
    // First, get the template content
    const { data: templateData, error: templateError } = await supabase
      .from('agreement_templates')
      .select('*')
      .eq('id', agreementData.templateId)
      .single();
    
    if (templateError) {
      throw templateError;
    }
    
    // Convert to database format (lowercase keys)
    const dbData = toDatabaseFormat({
      templateId: agreementData.templateId,
      renteeId: agreementData.renteeId,
      propertyId: agreementData.propertyId,
      status: 'pending_signature',
      content: templateData.content, // In a real implementation, this would be populated with actual data
      createdAt: new Date().toISOString(),
      eviaSignReference: `evia-${Date.now()}`, // Mock reference ID
    });
    
    const { data, error } = await supabase
      .from('agreements')
      .insert(dbData)
      .select();
    
    if (error) {
      throw error;
    }
    
    // Send notification to rentee about signing request
    if (agreementData.renteeEmail) {
      await sendEmailNotification(
        agreementData.renteeEmail,
        'Agreement Signing Request',
        `You have a new agreement that requires your signature. Please log in to the portal to review and sign.`,
      );
    }
    
    // Convert back to camelCase for frontend
    const responseData = fromDatabaseFormat(data[0]);
    
    // Add mock signing URL
    responseData.signingUrl = `https://example.com/sign/${responseData.id}`;
    
    return { 
      success: true, 
      data: responseData,
      error: null
    };
  } catch (error) {
    console.error('Error initializing signing request:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Function to check the status of a signing request
export const checkSigningStatus = async (agreementId) => {
  try {
    // In a real implementation, this would make an API call to Evia Sign
    // For now, we'll simulate by retrieving the agreement from Supabase
    const { data, error } = await supabase
      .from('agreements')
      .select('*')
      .eq('id', agreementId)
      .single();
    
    if (error) {
      throw error;
    }
    
    return { 
      success: true, 
      data: fromDatabaseFormat(data),
      error: null
    };
  } catch (error) {
    console.error('Error checking signing status:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Function to complete the signing process (mock implementation)
export const completeSigningProcess = async (agreementId, signatureData) => {
  try {
    // In a real implementation, this would make an API call to Evia Sign
    // For now, we'll simulate by updating the agreement in Supabase
    const dbData = toDatabaseFormat({
      status: 'signed',
      signedDate: new Date().toISOString(),
      documentUrl: signatureData.documentUrl || `https://example.com/signed-agreement-${agreementId}.pdf`,
      updatedAt: new Date().toISOString(),
    });

    const { data, error } = await supabase
      .from('agreements')
      .update(dbData)
      .eq('id', agreementId)
      .select();
    
    if (error) {
      throw error;
    }
    
    // Send notification to KH staff about completed signature
    // In a real implementation, you would get the staff email from the database
    await sendEmailNotification(
      'staff@khrentals.com',
      'Agreement Signed',
      `Agreement #${agreementId} has been signed by the rentee.`,
    );
    
    return { 
      success: true, 
      data: fromDatabaseFormat(data[0]),
      error: null
    };
  } catch (error) {
    console.error('Error completing signing process:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Function to get agreement templates
export const getAgreementTemplates = async (language = 'English') => {
  try {
    const { data, error } = await supabase
      .from('agreement_templates')
      .select('*')
      .eq('language', language);
    
    if (error) {
      throw error;
    }
    
    return { 
      success: true, 
      data: data.map(template => fromDatabaseFormat(template)),
      error: null
    };
  } catch (error) {
    console.error('Error fetching agreement templates:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Function to create a new agreement template
export const createAgreementTemplate = async (templateData) => {
  try {
    // Convert to database format (lowercase keys)
    const dbData = toDatabaseFormat({
      ...templateData,
      createdAt: new Date().toISOString(),
    });
    
    const { data, error } = await supabase
      .from('agreement_templates')
      .insert(dbData)
      .select();
    
    if (error) {
      throw error;
    }
    
    return { 
      success: true, 
      data: fromDatabaseFormat(data[0]),
      error: null
    };
  } catch (error) {
    console.error('Error creating agreement template:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Function to update an existing agreement template
export const updateAgreementTemplate = async (templateId, templateData) => {
  try {
    // Convert to database format (lowercase keys)
    const dbData = toDatabaseFormat({
      ...templateData,
      updatedAt: new Date().toISOString(),
    });
    
    const { data, error } = await supabase
      .from('agreement_templates')
      .update(dbData)
      .eq('id', templateId)
      .select();
    
    if (error) {
      throw error;
    }
    
    return { 
      success: true, 
      data: fromDatabaseFormat(data[0]),
      error: null
    };
  } catch (error) {
    console.error('Error updating agreement template:', error.message);
    return { 
      success: false, 
      data: null,
      error: error.message 
    };
  }
};

// Evia Sign API configuration
const EVIA_SIGN_API_URL = process.env.REACT_APP_EVIA_SIGN_API_URL || 'https://api.sign.enadocapp.com'; // Replace with actual API URL
const EVIA_SIGN_API_KEY = process.env.REACT_APP_EVIA_SIGN_API_KEY; // Should be set in environment variables

/**
 * Send a document for signature using Evia Sign API's Auto Stamping feature
 * @param {Object} params - Signature request parameters
 * @param {string} params.documentId - The agreement ID
 * @param {string} params.documentUrl - URL to the PDF document
 * @param {string} params.title - Title for the signature request (property name)
 * @param {string} params.message - Subject line (Rental Agreement with rentee name)
 * @param {Array} params.signatories - List of signatories with name, email, and identifier text
 * @returns {Promise<Object>} - Response with success status and request ID
 */
export const sendDocumentForSignature = async (params) => {
  try {
    // Validate required parameters
    if (!params.documentUrl || !params.title || !params.signatories || params.signatories.length < 2) {     
      throw new Error('Missing required signature parameters');
    }

    // Check for API key
    if (!EVIA_SIGN_API_KEY) {
      throw new Error('Evia Sign API key is not configured');
    }

    console.log('Preparing signature request:', params);

    // Prepare the request payload for auto-stamping mode
    const signatoryData = params.signatories.map(signatory => ({
      name: signatory.name,
      email: signatory.email,
      identifyingText: signatory.signatureIdentifier // Text that identifies where to place the signature   
    }));

    const requestPayload = {
      title: params.title,
      subject: params.message,
      message: `Please review and sign this rental agreement document.`,
      documentUrl: params.documentUrl,
      signatories: signatoryData,
      mode: 'AUTO_STAMPING',
      signatureOptions: {
        allowDrawn: true,
        allowTyped: true,
        allowImage: true
      },
      notificationPreferences: {
        sendEmailNotifications: true,
        notifyOnCompletion: true
      },
      callbackUrl: window.location.origin + '/api/signature-webhook' // Webhook to receive signature updates
    };

    console.log('Sending signature request to Evia Sign API:', requestPayload);

    // Make the API request - for now we'll mock the response
    // In a real implementation, this would make a call to the Evia Sign API
    // const response = await axios.post(
    //   `${EVIA_SIGN_API_URL}/signature-requests`,
    //   requestPayload,
    //   {
    //     headers: {
    //       'Authorization': `Bearer ${EVIA_SIGN_API_KEY}`,
    //       'Content-Type': 'application/json'
    //     }
    //   }
    // );

    // Mock response for development
    const mockResponse = {
      requestId: `evia-sign-${Date.now()}`,
      status: 'pending',
      signatories: params.signatories.map(signatory => ({
        name: signatory.name,
        email: signatory.email,
        status: 'pending'
      })),
      createdAt: new Date().toISOString()
    };

    return {
      success: true,
      requestId: mockResponse.requestId,
      status: mockResponse.status,
      data: mockResponse
    };
  } catch (error) {
    console.error('Error sending document for signature:', error);
    return {
      success: false,
      error: error.response?.data?.message || error.message
    };
  }
};

/**
 * Check the status of a signature request
 * @param {string} requestId - The signature request ID
 * @returns {Promise<Object>} - The signature status
 */
export const getSignatureStatus = async (requestId) => {
  try {
    console.log('Checking signature status for request:', requestId);
    
    if (!requestId) {
      throw new Error('Request ID is required');
    }

    if (!EVIA_SIGN_API_KEY) {
      throw new Error('Evia Sign API key is not configured');
    }

    // In a real implementation, this would make an API call to Evia Sign
    // const response = await axios.get(
    //   `${EVIA_SIGN_API_URL}/signature-requests/${requestId}`,
    //   {
    //     headers: {
    //       'Authorization': `Bearer ${EVIA_SIGN_API_KEY}`
    //     }
    //   }
    // );

    // Mock response for development
    const mockResponse = {
      requestId: requestId,
      status: Math.random() > 0.7 ? 'completed' : 'pending', // Randomly return completed status
      signatories: [
        {
          name: 'Tenant Name',
          email: 'tenant@example.com',
          status: Math.random() > 0.5 ? 'signed' : 'pending'
        },
        {
          name: 'Property Manager',
          email: 'manager@khrentals.com',
          status: Math.random() > 0.5 ? 'signed' : 'pending'
        }
      ],
      updatedAt: new Date().toISOString()
    };

    console.log('Signature status response:', mockResponse);

    return {
      success: true,
      data: mockResponse
    };
  } catch (error) {
    console.error('Error getting signature status:', error);
    return {
      success: false,
      error: error.response?.data?.message || error.message
    };
  }
};

/**
 * Download the signed document
 * @param {string} requestId - The signature request ID
 * @returns {Promise<Blob>} - The signed document as a Blob
 */
export const downloadSignedDocument = async (requestId) => {
  try {
    console.log('Downloading signed document for request:', requestId);
    
    if (!requestId) {
      throw new Error('Request ID is required');
    }

    if (!EVIA_SIGN_API_KEY) {
      throw new Error('Evia Sign API key is not configured');
    }

    // In a real implementation, this would make an API call to Evia Sign
    // const response = await axios.get(
    //   `${EVIA_SIGN_API_URL}/signature-requests/${requestId}/document`,
    //   {
    //     headers: {
    //       'Authorization': `Bearer ${EVIA_SIGN_API_KEY}`
    //     },
    //     responseType: 'blob'
    //   }
    // );
    
    // return response.data;

    // For development, create a simple PDF blob
    console.log('Creating mock signed document');
    
    // Create a simple text-based PDF for testing
    const pdfText = `This is a mock signed document for request ID: ${requestId}\nSigned on: ${new Date().toLocaleString()}`;
    
    // Create a blob that represents a simple PDF
    const mockPdfBlob = new Blob([pdfText], { type: 'application/pdf' });
    
    return mockPdfBlob;
  } catch (error) {
    console.error('Error downloading signed document:', error);
    throw error;
  }
};

/**
 * Handle webhook notification from Evia Sign when document status changes
 * @param {Object} webhookData - The webhook payload
 * @returns {Promise<Object>} - Processing result
 */
export const handleSignatureWebhook = async (webhookData) => {
  try {
    console.log('Received signature webhook data:', webhookData);

    // Implement webhook handling logic here
    // This would typically update the agreement status in your database

    return {
      success: true
    };
  } catch (error) {
    console.error('Error processing signature webhook:', error);
    return {
      success: false,
      error: error.message
    };
  }
}; 