import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { fetchData, insertData, updateData } from '../services/supabaseClient';
import { createTemplateDirectly } from '../services/databaseService';
import { toast } from 'react-hot-toast';
import Tooltip from '../components/common/Tooltip';
import { supabase } from '../services/supabaseClient';
import { STORAGE_BUCKETS } from '../services/fileService';

// UI Components
import RichTextEditor from '../components/common/RichTextEditor';

const AgreementTemplateForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEditMode = !!id;
  
  // Form state
  const [formData, setFormData] = useState({
    name: '',
    language: 'English',
    content: '',
    version: '1.0',
  });
  
  // Preview state
  const [showPreview, setShowPreview] = useState(false);
  const [previewContent, setPreviewContent] = useState('');
  
  // UI state
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  
  // Reference to the editor
  const [editorRef, setEditorRef] = useState(null);

  // Add state for expanded sections
  const [expandedSections, setExpandedSections] = useState({
    agreement: true,
    property: false,
    unit: false,
    rentee: false,
    terms: false
  });

  // Define available merge fields
  const mergeFields = {
    agreement: {
      startDate: '{{startDate}}',
      endDate: '{{endDate}}',
      currentDate: '{{currentDate}}',
      agreementId: '{{agreementId}}'
    },
    property: {
      name: '{{propertyName}}',
      address: '{{propertyAddress}}',
      type: '{{propertyType}}',
      squareFeet: '{{propertySquareFeet}}',
      yearBuilt: '{{propertyYearBuilt}}',
      amenities: '{{propertyAmenities}}',
      bankName: '{{propertyBankName}}',
      bankBranch: '{{propertyBankBranch}}',
      bankAccountNumber: '{{propertyBankAccount}}'
    },
    unit: {
      number: '{{unitNumber}}',
      floor: '{{unitFloor}}',
      bedrooms: '{{unitBedrooms}}',
      bathrooms: '{{unitBathrooms}}',
      squareFeet: '{{unitSquareFeet}}',
      description: '{{unitDescription}}',
      bankName: '{{unitBankName}}',
      bankBranch: '{{unitBankBranch}}',
      bankAccountNumber: '{{unitBankAccount}}'
    },
    rentee: {
      name: '{{renteeName}}',
      email: '{{renteeEmail}}',
      phone: '{{renteePhone}}',
      permanentAddress: '{{renteePermanentAddress}}',
      nationalId: '{{renteeNationalId}}',
      id: '{{renteeId}}'
    },
    terms: {
      monthlyRent: '{{monthlyRent}}',
      depositAmount: '{{depositAmount}}',
      paymentDueDay: '{{paymentDueDay}}',
      noticePeriod: '{{noticePeriod}}',
      specialConditions: '{{specialConditions}}',
      utilities: '{{utilities}}',
      parkingSpaces: '{{parkingSpaces}}',
      petPolicy: '{{petPolicy}}',
      maintenanceContact: '{{maintenanceContact}}',
      emergencyContact: '{{emergencyContact}}',
      leaseType: '{{leaseType}}',
      paymentMethods: '{{paymentMethods}}',
      lateFees: '{{lateFees}}',
      insuranceRequirements: '{{insuranceRequirements}}'
    }
  };

  // Fetch template data if in edit mode
  useEffect(() => {
    const fetchTemplateData = async () => {
      if (isEditMode) {
        try {
          setLoading(true);
          
          // Specific validation for Version 4 UUIDs generated by PostgreSQL's gen_random_uuid()
          // Version 4 UUIDs have the form: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
          // where x is any hexadecimal digit and y is one of 8, 9, a, or b
          const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
          if (!uuidV4Regex.test(id)) {
            throw new Error(`Invalid template ID format: ${id}. Expected a valid UUID v4.`);
          }
          
          console.log('Fetching template data for ID:', id);
          const { data, error } = await fetchData('agreement_templates', {
            filters: [{ column: 'id', operator: 'eq', value: id }],
          });
          
          if (error) {
            console.error('Database error fetching template:', error);
            throw error;
          }
          
          if (!data || data.length === 0) {
            console.error('Template not found with ID:', id);
            throw new Error(`Template with ID ${id} not found.`);
          }
          
          const template = data[0];
          console.log('Template loaded successfully:', template.name);
          
          setFormData({
            name: template.name || '',
            language: template.language || 'English',
            content: template.content || '',
            version: template.version || '1.0',
            createdat: template.createdat || null,
            updatedat: template.updatedat || null,
          });
        } catch (error) {
          console.error('Error fetching template data:', error.message);
          setError(error.message);
          toast.error(`Failed to load template: ${error.message}`);
          // Navigate back to template list on error
          navigate('/dashboard/agreements/templates');
        } finally {
          setLoading(false);
        }
      }
    };
    
    fetchTemplateData();
  }, [id, isEditMode, navigate]);
  
  // Handle form input changes
  const handleInputChange = (e) => {
    if (e && e.preventDefault) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    const { name, value } = e.target || { name: '', value: '' };
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
  };
  
  // Function to handle rich text editor content change
  const handleEditorContentChange = (content) => {
    setFormData(prev => ({
      ...prev,
      content
    }));
  };

  // Function to insert merge field at cursor position
  const insertMergeField = (field) => {
    if (editorRef) {
      editorRef.commands.insertContent(field);
      editorRef.commands.focus();
    }
  };

  // Add handler for merge field button to prevent form submission
  const handleMergeFieldClick = (e, field, name) => {
    e.preventDefault();
    e.stopPropagation();
    insertMergeField(field);
    toast.success(`${name} field inserted`);
  };

  // Sample data for preview
  const sampleData = {
    agreement: {
      startDate: '01/01/2024',
      endDate: '12/31/2024',
      currentDate: new Date().toLocaleDateString(),
      agreementId: 'AGR-2024-001',
      rentAmount: '$1,500.00',
      securityDeposit: '$3,000.00',
      agreementType: 'Residential Lease',
      agreementStatus: 'Active'
    },
    property: {
      propertyId: 'PROP-001',
      propertyName: 'Sunset Apartments',
      propertyAddress: '123 Main Street, New York, NY 10001',
      propertyCity: 'New York',
      propertyState: 'NY',
      propertyZip: '10001',
      propertyType: 'Apartment Building',
      propertySquareFeet: '10,000',
      propertyYearBuilt: '2010',
      propertyAmenities: 'Swimming Pool, Gym, Underground Parking',
      propertyBankName: 'Chase Bank',
      propertyBankBranch: 'Manhattan Branch',
      propertyBankAccount: '1234567890'
    },
    unit: {
      unitId: 'UNIT-101',
      unitNumber: '101',
      unitFloor: '1st',
      unitType: 'Two Bedroom',
      unitSize: '1,000 sq ft',
      bedrooms: '2',
      bathrooms: '2',
      unitSquareFeet: '1,000',
      unitDescription: 'Spacious corner unit with balcony',
      unitBankName: 'Bank of America',
      unitBankBranch: 'Downtown Branch',
      unitBankAccount: '0987654321'
    },
    rentee: {
      renteeName: 'John Smith',
      renteeEmail: 'john.smith@example.com',
      renteePhone: '(555) 123-4567',
      renteeAddress: '456 Park Avenue, New York, NY 10022',
      renteePermanentAddress: '789 Broadway, New York, NY 10003',
      renteeNationalId: 'ID123456789',
      renteeId: 'RENT-001'
    },
    terms: {
      monthlyRent: '$1,500.00',
      depositAmount: '$3,000.00',
      paymentDueDay: '1st of each month',
      noticePeriod: '60 days',
      specialConditions: 'No smoking, No pets allowed',
      utilities: 'Water and trash included, tenant pays electricity and gas',
      parkingSpaces: '1 assigned spot (#101)',
      petPolicy: 'No pets allowed',
      maintenanceContact: 'Building Manager: (555) 987-6543',
      emergencyContact: 'Emergency Services: 911, Property Management: (555) 789-0123',
      leaseType: 'Fixed Term Lease',
      paymentMethods: 'ACH, Check, Money Order',
      lateFees: '$50 if paid after the 5th of the month',
      insuranceRequirements: 'Renter\'s insurance with $100,000 liability coverage required'
    }
  };

  // Function to generate preview with sample data
  const generatePreview = async () => {
    try {
      if (!formData.content) {
        toast.error('Please add some content before previewing');
        return;
      }

      setLoading(true);
      let previewContent = formData.content;

      // Create a mapping of all merge field variables to their values
      const mergeFieldMap = {
        // Agreement fields
        '{{startDate}}': sampleData.agreement.startDate,
        '{{endDate}}': sampleData.agreement.endDate,
        '{{currentDate}}': sampleData.agreement.currentDate,
        '{{agreementId}}': sampleData.agreement.agreementId,
        '{{rentAmount}}': sampleData.agreement.rentAmount,
        '{{securityDeposit}}': sampleData.agreement.securityDeposit,
        '{{agreementType}}': sampleData.agreement.agreementType,
        '{{agreementStatus}}': sampleData.agreement.agreementStatus,
        
        // Property fields
        '{{propertyId}}': sampleData.property.propertyId,
        '{{propertyName}}': sampleData.property.propertyName,
        '{{propertyAddress}}': sampleData.property.propertyAddress,
        '{{propertyCity}}': sampleData.property.propertyCity,
        '{{propertyState}}': sampleData.property.propertyState,
        '{{propertyZip}}': sampleData.property.propertyZip,
        '{{propertyType}}': sampleData.property.propertyType,
        '{{propertySquareFeet}}': sampleData.property.propertySquareFeet,
        '{{propertyYearBuilt}}': sampleData.property.propertyYearBuilt,
        '{{propertyAmenities}}': sampleData.property.propertyAmenities,
        '{{propertyBankName}}': sampleData.property.propertyBankName,
        '{{propertyBankBranch}}': sampleData.property.propertyBankBranch,
        '{{propertyBankAccount}}': sampleData.property.propertyBankAccount,
        
        // Unit fields
        '{{unitId}}': sampleData.unit.unitId,
        '{{unitNumber}}': sampleData.unit.unitNumber,
        '{{unitFloor}}': sampleData.unit.unitFloor,
        '{{unitType}}': sampleData.unit.unitType,
        '{{unitSize}}': sampleData.unit.unitSize,
        '{{bedrooms}}': sampleData.unit.bedrooms,
        '{{bathrooms}}': sampleData.unit.bathrooms,
        '{{unitSquareFeet}}': sampleData.unit.unitSquareFeet,
        '{{unitDescription}}': sampleData.unit.unitDescription,
        '{{unitBankName}}': sampleData.unit.unitBankName,
        '{{unitBankBranch}}': sampleData.unit.unitBankBranch,
        '{{unitBankAccount}}': sampleData.unit.unitBankAccount,
        
        // Rentee fields
        '{{renteeName}}': sampleData.rentee.renteeName,
        '{{renteeEmail}}': sampleData.rentee.renteeEmail,
        '{{renteePhone}}': sampleData.rentee.renteePhone,
        '{{renteeAddress}}': sampleData.rentee.renteeAddress,
        '{{renteePermanentAddress}}': sampleData.rentee.renteePermanentAddress,
        '{{renteeNationalId}}': sampleData.rentee.renteeNationalId,
        '{{renteeId}}': sampleData.rentee.renteeId,
        
        // Terms fields
        '{{monthlyRent}}': sampleData.terms.monthlyRent,
        '{{depositAmount}}': sampleData.terms.depositAmount,
        '{{paymentDueDay}}': sampleData.terms.paymentDueDay,
        '{{noticePeriod}}': sampleData.terms.noticePeriod,
        '{{specialConditions}}': sampleData.terms.specialConditions,
        '{{utilities}}': sampleData.terms.utilities,
        '{{parkingSpaces}}': sampleData.terms.parkingSpaces,
        '{{petPolicy}}': sampleData.terms.petPolicy,
        '{{maintenanceContact}}': sampleData.terms.maintenanceContact,
        '{{emergencyContact}}': sampleData.terms.emergencyContact,
        '{{leaseType}}': sampleData.terms.leaseType,
        '{{paymentMethods}}': sampleData.terms.paymentMethods,
        '{{lateFees}}': sampleData.terms.lateFees,
        '{{insuranceRequirements}}': sampleData.terms.insuranceRequirements,
      };

      // Replace all merge field placeholders with sample data
      // Using a document fragment approach to preserve HTML structure
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = previewContent;
      
      // Process text nodes to replace merge fields
      const replaceInTextNodes = (node) => {
        if (node.nodeType === Node.TEXT_NODE) {
          let content = node.textContent;
          Object.entries(mergeFieldMap).forEach(([placeholder, value]) => {
            // Escape regex special characters in the placeholder
            const escapedPlaceholder = placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            content = content.replace(new RegExp(escapedPlaceholder, 'g'), value);
          });
          node.textContent = content;
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          Array.from(node.childNodes).forEach(replaceInTextNodes);
        }
      };
      
      try {
        // Attempt to use DOM manipulation for better HTML preservation
        replaceInTextNodes(tempDiv);
        
        // Ensure table structure is preserved
        const tables = tempDiv.querySelectorAll('table');
        tables.forEach(table => {
          // Add a class to the table
          table.classList.add('preview-table');
          
          // Ensure all cells have borders
          const cells = table.querySelectorAll('th, td');
          cells.forEach(cell => {
            cell.style.border = '1px solid #ddd';
            cell.style.padding = '8px';
          });
        });
        
        previewContent = tempDiv.innerHTML;
      } catch (domError) {
        console.warn("DOM manipulation failed, falling back to string replacement", domError);
        // Fallback to simple string replacement
        Object.entries(mergeFieldMap).forEach(([placeholder, value]) => {
          const escapedPlaceholder = placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          previewContent = previewContent.replace(new RegExp(escapedPlaceholder, 'g'), value);
        });
      }

      console.log('Preview content generated');
      setPreviewContent(previewContent);
      setShowPreview(true);
    } catch (error) {
      console.error('Error generating preview:', error);
      toast.error('Failed to generate preview: ' + error.message);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setSubmitting(true);
      setError(null);
      
      console.log('Template submission started', { 
        formData, 
        isEditMode 
      });
      
      // Validate form data
      if (!formData.name || !formData.content) {
        throw new Error('Please fill in all required fields.');
      }
      
      // Prepare data for submission with correct lowercase column names
      const templateData = {
        name: formData.name,
        language: formData.language,
        content: formData.content,
        version: formData.version,
      };
      
      console.log('Template data prepared:', templateData);
      
      // Generate a unique ID for a new template if we're not in edit mode
      const templateId = isEditMode ? id : crypto.randomUUID();
      console.log('Using template ID:', templateId);
      
      // Save to database
      let result;
      
      if (isEditMode) {
        console.log('Updating existing template with ID:', id);
        result = await updateData('agreement_templates', id, templateData);
      } else {
        // If we're creating a new template, use the generated templateId
        console.log('Creating new template with ID:', templateId);
        
        result = await insertData('agreement_templates', { 
          ...templateData, 
          id: templateId 
        });
      }
      
      console.log('Database operation result:', result);
      
      if (result.error) {
        console.error('Error saving template:', result.error);
        throw new Error(`Failed to save template: ${result.error.message || 'Unknown database error'}`);
      }
      
      // Template saved successfully to database
      toast.success(`Template ${isEditMode ? 'updated' : 'created'} successfully!`);
      
      // Navigate back to templates list
      console.log('Navigation to template list');
      navigate('/dashboard/agreements/templates');
      
    } catch (error) {
      console.error('Error in template creation process:', error);
      setError(error.message || 'An unexpected error occurred');
      toast.error(error.message || 'Failed to save template');
    } finally {
      setSubmitting(false);
    }
  };
  
  // Function to toggle section expansion
  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-lg">Loading template data...</div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      {/* Header Section */}
      <div className="mb-6 border-b pb-4">
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
          <h1 className="text-xl sm:text-2xl font-bold text-gray-900">
            {isEditMode ? 'Edit Agreement Template' : 'Create New Agreement Template'}
          </h1>
          <button
            type="button"
            onClick={() => navigate('/dashboard/agreements/templates')}
            className="text-gray-600 hover:text-gray-900 flex items-center gap-2 text-sm"
          >
            <i className="fas fa-arrow-left"></i>
            Back to Templates
          </button>
        </div>
        <p className="mt-2 text-sm text-gray-600">
          Create or modify agreement templates with dynamic merge fields.
        </p>
      </div>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6" role="alert">
          <div className="flex items-center">
            <i className="fas fa-exclamation-circle text-red-400 mr-3"></i>
            <div>
              <p className="font-medium text-red-800">Error</p>
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 gap-6">
        {/* Main Form Section */}
        <div>
          <form 
            onSubmit={handleSubmit}
            className="agreement-template-form"
          >
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
              <div className="p-4 sm:p-6 space-y-6">
                {/* Template Details */}
                <div className="space-y-4">
                  <h2 className="text-lg font-medium text-gray-900">Template Details</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Template Name</label>
                      <input
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                        placeholder="e.g., Standard Rental Agreement"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Language</label>
                      <select
                        name="language"
                        value={formData.language}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                        required
                      >
                        <option value="English">English</option>
                        <option value="Spanish">Spanish</option>
                        <option value="French">French</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Merge Fields - Collapsible Sections */}
                <div className="space-y-4">
                  <h2 className="text-lg font-medium text-gray-900">Available Merge Fields</h2>
                  <p className="text-sm text-gray-600">Click on any field to insert it into your template at the cursor position.</p>
                  
                  <div className="space-y-2">
                    {/* Agreement Fields */}
                    <div className="border rounded-md overflow-hidden">
                      <button
                        type="button"
                        onClick={() => toggleSection('agreement')}
                        className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 text-left"
                      >
                        <span className="font-medium">Agreement Fields</span>
                        <i className={`fas fa-chevron-${expandedSections.agreement ? 'up' : 'down'}`}></i>
                      </button>
                      {expandedSections.agreement && (
                        <div className="p-3 bg-white">
                          <div className="flex flex-wrap gap-2">
                            {Object.entries(mergeFields.agreement).map(([key, field]) => (
                              <button
                                key={key}
                                type="button"
                                onClick={(e) => handleMergeFieldClick(e, field, key)}
                                className="px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded hover:bg-blue-100"
                              >
                                {key}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Property Fields */}
                    <div className="border rounded-md overflow-hidden">
                      <button
                        type="button"
                        onClick={() => toggleSection('property')}
                        className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 text-left"
                      >
                        <span className="font-medium">Property Fields</span>
                        <i className={`fas fa-chevron-${expandedSections.property ? 'up' : 'down'}`}></i>
                      </button>
                      {expandedSections.property && (
                        <div className="p-3 bg-white">
                          <div className="flex flex-wrap gap-2">
                            {Object.entries(mergeFields.property).map(([key, field]) => (
                              <button
                                key={key}
                                type="button"
                                onClick={(e) => handleMergeFieldClick(e, field, key)}
                                className="px-2 py-1 bg-green-50 text-green-700 text-xs rounded hover:bg-green-100"
                              >
                                {key}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Unit Fields */}
                    <div className="border rounded-md overflow-hidden">
                      <button
                        type="button"
                        onClick={() => toggleSection('unit')}
                        className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 text-left"
                      >
                        <span className="font-medium">Unit Fields</span>
                        <i className={`fas fa-chevron-${expandedSections.unit ? 'up' : 'down'}`}></i>
                      </button>
                      {expandedSections.unit && (
                        <div className="p-3 bg-white">
                          <div className="flex flex-wrap gap-2">
                            {Object.entries(mergeFields.unit).map(([key, field]) => (
                              <button
                                key={key}
                                type="button"
                                onClick={(e) => handleMergeFieldClick(e, field, key)}
                                className="px-2 py-1 bg-indigo-50 text-indigo-700 text-xs rounded hover:bg-indigo-100"
                              >
                                {key}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Rentee Fields */}
                    <div className="border rounded-md overflow-hidden">
                      <button
                        type="button"
                        onClick={() => toggleSection('rentee')}
                        className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 text-left"
                      >
                        <span className="font-medium">Rentee Fields</span>
                        <i className={`fas fa-chevron-${expandedSections.rentee ? 'up' : 'down'}`}></i>
                      </button>
                      {expandedSections.rentee && (
                        <div className="p-3 bg-white">
                          <div className="flex flex-wrap gap-2">
                            {Object.entries(mergeFields.rentee).map(([key, field]) => (
                              <button
                                key={key}
                                type="button"
                                onClick={(e) => handleMergeFieldClick(e, field, key)}
                                className="px-2 py-1 bg-yellow-50 text-yellow-700 text-xs rounded hover:bg-yellow-100"
                              >
                                {key}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Terms Fields */}
                    <div className="border rounded-md overflow-hidden">
                      <button
                        type="button"
                        onClick={() => toggleSection('terms')}
                        className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 text-left"
                      >
                        <span className="font-medium">Terms Fields</span>
                        <i className={`fas fa-chevron-${expandedSections.terms ? 'up' : 'down'}`}></i>
                      </button>
                      {expandedSections.terms && (
                        <div className="p-3 bg-white">
                          <div className="flex flex-wrap gap-2">
                            {Object.entries(mergeFields.terms).map(([key, field]) => (
                              <button
                                key={key}
                                type="button"
                                onClick={(e) => handleMergeFieldClick(e, field, key)}
                                className="px-2 py-1 bg-purple-50 text-purple-700 text-xs rounded hover:bg-purple-100"
                              >
                                {key}
                              </button>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Template Content */}
                <div className="space-y-4">
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                    <h2 className="text-lg font-medium text-gray-900">Template Content</h2>
                    <Tooltip content="See how your template looks with sample data">
                      <button
                        type="button"
                        onClick={generatePreview}
                        className="inline-flex items-center px-3 py-1.5 text-sm bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        <i className="fas fa-eye mr-1.5"></i>
                        Preview
                      </button>
                    </Tooltip>
                  </div>
                  <RichTextEditor
                    initialContent={formData.content}
                    onChange={handleEditorContentChange}
                    placeholder="Start writing your agreement template..."
                    onEditorReady={setEditorRef}
                    height="400px"
                  />
                </div>
              </div>

              {/* Form Actions */}
              <div className="bg-gray-50 px-4 sm:px-6 py-3 sm:py-4 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => navigate('/dashboard/agreements/templates')}
                  className="px-3 py-1.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={submitting}
                  className="px-3 py-1.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  {submitting ? (
                    <>
                      <i className="fas fa-spinner fa-spin mr-1.5"></i>
                      Saving...
                    </>
                  ) : (
                    <>
                      <i className="fas fa-save mr-1.5"></i>
                      {isEditMode ? 'Update' : 'Create'}
                    </>
                  )}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>

      {/* Preview Modal */}
      {showPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex justify-between items-center px-4 sm:px-6 py-3 sm:py-4 border-b">
              <h2 className="text-lg sm:text-xl font-bold text-gray-900">Template Preview</h2>
              <button
                onClick={() => setShowPreview(false)}
                className="text-gray-500 hover:text-gray-700 focus:outline-none"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
            <div className="p-4 sm:p-6 overflow-y-auto bg-white" style={{ maxHeight: 'calc(90vh - 80px)' }}>
              <div 
                className="preview-content text-sm sm:text-base"
                dangerouslySetInnerHTML={{ __html: previewContent }}
              />
            </div>
          </div>
        </div>
      )}

      {/* Add global styles for rich text preview */}
      <style jsx="true">{`
        .preview-content {
          font-family: Arial, sans-serif;
          font-size: 14px;
          line-height: 1.6;
          color: #333;
        }
        .preview-content h1, 
        .preview-content h2, 
        .preview-content h3, 
        .preview-content h4 {
          margin-top: 1.5rem;
          margin-bottom: 1rem;
          font-weight: 600;
          line-height: 1.25;
        }
        .preview-content h1 { font-size: 1.5rem; }
        .preview-content h2 { font-size: 1.25rem; }
        .preview-content h3 { font-size: 1.125rem; }
        .preview-content p { margin-bottom: 1rem; }
        .preview-content ul, .preview-content ol {
          padding-left: 2rem;
          margin-bottom: 1rem;
        }
        .preview-content ul { list-style-type: disc; }
        .preview-content ol { list-style-type: decimal; }
        .preview-content table {
          border-collapse: collapse;
          width: 100%;
          margin-bottom: 1rem;
          border: 2px solid #ddd;
          display: block;
          overflow-x: auto;
          max-width: 100%;
        }
        .preview-content table th,
        .preview-content table td {
          border: 1px solid #ddd;
          padding: 8px;
          vertical-align: top;
        }
        .preview-content table th {
          padding-top: 12px;
          padding-bottom: 12px;
          text-align: left;
          background-color: #f8f9fa;
          font-weight: bold;
        }
        .preview-content table tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .preview-content a {
          color: #3182ce;
          text-decoration: underline;
        }
        .preview-content blockquote {
          border-left: 4px solid #e2e8f0;
          padding-left: 1rem;
          font-style: italic;
          margin-left: 0;
          margin-right: 0;
        }
        .preview-content strong { font-weight: bold; }
        .preview-content em { font-style: italic; }
        
        @media (max-width: 640px) {
          .preview-content {
            font-size: 13px;
          }
          .preview-content h1 { font-size: 1.25rem; }
          .preview-content h2 { font-size: 1.125rem; }
          .preview-content h3 { font-size: 1rem; }
        }
      `}</style>
    </div>
  );
};

export default AgreementTemplateForm; 