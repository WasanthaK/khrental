name: Build and deploy Node.js app to Azure Web App - khrental

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      VITE_EVIA_SIGN_CLIENT_ID: ${{ secrets.EVIA_SIGN_CLIENT_ID }}
      VITE_EVIA_SIGN_CLIENT_SECRET: ${{ secrets.EVIA_SIGN_CLIENT_SECRET }}
      VITE_API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      VITE_WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: npm install and build
        run: |
          npm install
          npm install terser --save-dev
          # Create .env file for build
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" > .env
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_ID=$VITE_EVIA_SIGN_CLIENT_ID" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_SECRET=$VITE_EVIA_SIGN_CLIENT_SECRET" >> .env
          echo "VITE_API_ENDPOINT=$VITE_API_ENDPOINT" >> .env
          echo "VITE_WEBHOOK_URL=$VITE_WEBHOOK_URL" >> .env
          npm run build

      - name: Verify build output
        run: |
          echo "Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "Build output directory 'dist' not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Build output file 'dist/index.html' not found!"
            exit 1
          fi
          echo "Build output verified successfully"

      - name: Prepare deployment files
        run: |
          # Create startup script first (in root)
          echo '#!/bin/bash
          cd /home/site/wwwroot
          npm install -g serve
          
          # Create env-config.js with environment variables
          cat > env-config.js << EOL
          window._env_ = {
            VITE_SUPABASE_URL: process.env.VITE_SUPABASE_URL || "${VITE_SUPABASE_URL}",
            VITE_SUPABASE_ANON_KEY: process.env.VITE_SUPABASE_ANON_KEY || "${VITE_SUPABASE_ANON_KEY}",
            VITE_EVIA_SIGN_CLIENT_ID: process.env.VITE_EVIA_SIGN_CLIENT_ID || "${VITE_EVIA_SIGN_CLIENT_ID}",
            VITE_EVIA_SIGN_CLIENT_SECRET: process.env.VITE_EVIA_SIGN_CLIENT_SECRET || "${VITE_EVIA_SIGN_CLIENT_SECRET}",
            VITE_API_ENDPOINT: process.env.VITE_API_ENDPOINT || "${VITE_API_ENDPOINT}",
            VITE_WEBHOOK_URL: process.env.VITE_WEBHOOK_URL || "${VITE_WEBHOOK_URL}"
          };
          console.log("Environment variables loaded:", window._env_);
          EOL
          
          # Create a debug script to check environment variables
          cat > debug-env.sh << EOL
          #!/bin/bash
          echo "Checking environment variables..."
          echo "VITE_SUPABASE_URL: ${VITE_SUPABASE_URL:+set}"
          echo "VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY:+set}"
          echo "VITE_EVIA_SIGN_CLIENT_ID: ${VITE_EVIA_SIGN_CLIENT_ID:+set}"
          echo "VITE_EVIA_SIGN_CLIENT_SECRET: ${VITE_EVIA_SIGN_CLIENT_SECRET:+set}"
          echo "VITE_API_ENDPOINT: ${VITE_API_ENDPOINT:+set}"
          echo "VITE_WEBHOOK_URL: ${VITE_WEBHOOK_URL:+set}"
          echo "Checking process.env variables..."
          echo "VITE_SUPABASE_URL: ${process.env.VITE_SUPABASE_URL:+set}"
          echo "VITE_SUPABASE_ANON_KEY: ${process.env.VITE_SUPABASE_ANON_KEY:+set}"
          echo "VITE_EVIA_SIGN_CLIENT_ID: ${process.env.VITE_EVIA_SIGN_CLIENT_ID:+set}"
          echo "VITE_EVIA_SIGN_CLIENT_SECRET: ${process.env.VITE_EVIA_SIGN_CLIENT_SECRET:+set}"
          echo "VITE_API_ENDPOINT: ${process.env.VITE_API_ENDPOINT:+set}"
          echo "VITE_WEBHOOK_URL: ${process.env.VITE_WEBHOOK_URL:+set}"
          EOL
          chmod +x debug-env.sh
          
          # Run the debug script
          ./debug-env.sh
          
          serve -s . -p 8080' > startup.sh
          chmod +x startup.sh
          
          # Create web.config
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="StaticFileModuleHtml" path="*.html" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleJs" path="*.js" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleCss" path="*.css" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
            </system.webServer>
          </configuration>' > web.config
          
          # Copy build files
          cp -r dist/* .
          
          # Verify files
          echo "Checking deployment files:"
          ls -la
          echo "Checking startup script:"
          cat startup.sh
          echo "Checking startup script permissions:"
          ls -l startup.sh
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: |
            ./*
            startup.sh
            web.config
            !node_modules
            !src
            !.git
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Verify deployment files
        run: |
          echo "Checking deployment files:"
          ls -la
          echo "Checking startup script:"
          cat startup.sh
          echo "Ensuring startup script is executable:"
          chmod +x startup.sh

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EEDC2329EBDE4906AAD5DBEFBDBD8982 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B76BB5BB72494662B2E55987D0F9FEC7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_62093CB513E141DEBC62ACAB8F0862DB }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'khrental'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_1234567890 }}
          package: .
          startup-command: '/home/site/wwwroot/startup.sh'

      - name: 'Set environment variables'
        run: |
          # Set environment variables using Azure CLI
          az webapp config appsettings set \
            --name khrental \
            --resource-group khrental \
            --settings \
            VITE_SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            VITE_SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
            VITE_EVIA_SIGN_CLIENT_ID="${{ secrets.EVIA_SIGN_CLIENT_ID }}" \
            VITE_EVIA_SIGN_CLIENT_SECRET="${{ secrets.EVIA_SIGN_CLIENT_SECRET }}" \
            VITE_API_ENDPOINT="${{ secrets.API_ENDPOINT }}" \
            VITE_WEBHOOK_URL="${{ secrets.WEBHOOK_URL }}"

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          echo "Deployment verification complete"