name: Build and deploy Node.js app to Azure Web App - khrental

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      VITE_EVIA_SIGN_CLIENT_ID: ${{ secrets.VITE_EVIA_SIGN_CLIENT_ID }}
      VITE_EVIA_SIGN_CLIENT_SECRET: ${{ secrets.VITE_EVIA_SIGN_CLIENT_SECRET }}
      VITE_API_ENDPOINT: ${{ secrets.VITE_API_ENDPOINT }}
      VITE_WEBHOOK_URL: ${{ secrets.VITE_WEBHOOK_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Install and build project
        run: |
          npm install
          npm install terser --save-dev
          # Create .env file
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" > .env
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_ID=$VITE_EVIA_SIGN_CLIENT_ID" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_SECRET=$VITE_EVIA_SIGN_CLIENT_SECRET" >> .env
          echo "VITE_API_ENDPOINT=$VITE_API_ENDPOINT" >> .env
          echo "VITE_WEBHOOK_URL=$VITE_WEBHOOK_URL" >> .env
          npm run build
          
      - name: Verify build output
        run: |
          echo "Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "Build output directory 'dist' not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Build output file 'dist/index.html' not found!"
            exit 1
          fi
          echo "Build output verified successfully."
          
      - name: Prepare deployment files
        run: |
          # Create a folder for the web files
          mkdir -p webroot
          
          # Copy the build output into webroot
          cp -r dist/* webroot/
          
          # Create startup script
          cat << 'EOF' > startup.sh
          #!/bin/bash
          set -e
          
          cd /home/site/wwwroot/webroot
          
          # Debug: Print current directory and contents
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Debug: Print environment variables (masking sensitive values)
          echo "Environment variables:"
          env | grep VITE_ | sed 's/\(.*KEY=\).*/\1***/' | sed 's/\(.*SECRET=\).*/\1***/'
          
          # Create env-config.js with environment variables and ensure proper URL formatting
          cat > env-config.js << ENVEOF
          window._env_ = {
            VITE_SUPABASE_URL: "${VITE_SUPABASE_URL}",
            VITE_SUPABASE_ANON_KEY: "${VITE_SUPABASE_ANON_KEY}",
            VITE_EVIA_SIGN_CLIENT_ID: "${VITE_EVIA_SIGN_CLIENT_ID}",
            VITE_EVIA_SIGN_CLIENT_SECRET: "${VITE_EVIA_SIGN_CLIENT_SECRET}",
            VITE_API_ENDPOINT: "${VITE_API_ENDPOINT}",
            VITE_WEBHOOK_URL: "https://${VITE_WEBHOOK_URL}"
          };
          console.log("Environment variables loaded:", {
            ...window._env_,
            VITE_SUPABASE_ANON_KEY: '***',
            VITE_EVIA_SIGN_CLIENT_SECRET: '***'
          });
          ENVEOF
          
          # Install serve if not already installed
          if ! command -v serve &> /dev/null; then
            echo "Installing serve..."
            npm install -g serve
          fi
          
          # Start the server from the webroot directory
          echo "Starting server..."
          exec serve -s . -l 8080
          EOF
          
          chmod +x startup.sh
          
          # Create web.config in webroot
          cat << 'EOF' > webroot/web.config
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="StaticFileModuleHtml" path="*.html" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleJs" path="*.js" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleCss" path="*.css" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <mimeMap fileExtension=".json" mimeType="application/json" />
                <mimeMap fileExtension=".webmanifest" mimeType="application/manifest+json" />
              </staticContent>
            </system.webServer>
          </configuration>
          EOF

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: |
            webroot/
            startup.sh
            !node_modules/
            !src/
            !.git/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Verify deployment files
        run: |
          echo "Checking deployment files:"
          ls -la
          echo "Ensuring startup script is executable:"
          chmod +x startup.sh
          
      - name: Verify deployment files detailed
        run: |
          echo "Checking deployment files:"
          ls -la
          echo "Checking startup script content:"
          cat startup.sh
          echo "Ensuring startup script is executable:"
          chmod +x startup.sh
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EEDC2329EBDE4906AAD5DBEFBDBD8982 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B76BB5BB72494662B2E55987D0F9FEC7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_62093CB513E141DEBC62ACAB8F0862DB }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'khrental'
          slot-name: 'Production'
          package: .
          startup-command: '/home/site/wwwroot/startup.sh'

      - name: Test deployment and environment variables
        run: |
          echo "Testing deployment and environment variables..."
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Get the app URL
          APP_URL="https://khrental.azurewebsites.net"
          echo "Testing application at: $APP_URL"
          
          # Test the main application
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)
          echo "Main application HTTP status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Warning: Main application not responding with 200 OK"
          fi
          
          # Test env-config.js
          ENV_CONFIG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/env-config.js)
          echo "env-config.js HTTP status: $ENV_CONFIG_STATUS"
          if [ "$ENV_CONFIG_STATUS" != "200" ]; then
            echo "Warning: env-config.js not accessible"
          fi
          
          # Check environment variables
          echo "Checking environment variables..."
          az webapp config appsettings list \
            --name khrental \
            --resource-group ThreeCreeks \
            --query "[?starts_with(name, 'VITE_')].{Name:name, Value:value}" \
            -o table
          
          # Fetch recent logs instead of tailing
          echo "Fetching recent application logs..."
          az webapp log download \
            --name khrental \
            --resource-group ThreeCreeks \
            --log-file logs.zip
          
          if [ -f logs.zip ]; then
            unzip -p logs.zip */docker.log | tail -n 50
            rm logs.zip
          fi

      - name: Verify deployment
        run: |
          echo "Deployment verification complete."
          echo "Please check the application at: https://khrental.azurewebsites.net"
          echo "If you encounter any issues, check the Azure portal for detailed logs."
