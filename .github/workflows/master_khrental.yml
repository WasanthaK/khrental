name: Build and deploy Node.js app to Azure Web App - khrental

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      VITE_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_ROLE_KEY }}
      VITE_EVIA_SIGN_CLIENT_ID: ${{ secrets.VITE_EVIA_SIGN_CLIENT_ID }}
      VITE_EVIA_SIGN_CLIENT_SECRET: ${{ secrets.VITE_EVIA_SIGN_CLIENT_SECRET }}
      VITE_EVIA_ACCESS_TOKEN: ${{ secrets.VITE_EVIA_ACCESS_TOKEN }}
      VITE_API_ENDPOINT: ${{ secrets.VITE_API_ENDPOINT }}
      VITE_WEBHOOK_URL: ${{ secrets.VITE_WEBHOOK_URL }}
      VITE_SENDGRID_API_KEY: ${{ secrets.VITE_SENDGRID_API_KEY }}
      VITE_EMAIL_FROM: ${{ secrets.VITE_EMAIL_FROM }}
      VITE_EMAIL_FROM_NAME: ${{ secrets.VITE_EMAIL_FROM_NAME }}
      VITE_APP_BASE_URL: ${{ secrets.VITE_APP_BASE_URL }}
      VITE_EMAIL_FUNCTION_URL: ${{ secrets.VITE_EMAIL_FUNCTION_URL }}
      VITE_EMAIL_FUNCTION_KEY: ${{ secrets.VITE_EMAIL_FUNCTION_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Install and build project
        run: |
          npm install
          npm install terser --save-dev
          # Create .env file
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" > .env
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
          echo "VITE_SUPABASE_SERVICE_ROLE_KEY=$VITE_SUPABASE_SERVICE_ROLE_KEY" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_ID=$VITE_EVIA_SIGN_CLIENT_ID" >> .env
          echo "VITE_EVIA_SIGN_CLIENT_SECRET=$VITE_EVIA_SIGN_CLIENT_SECRET" >> .env
          echo "VITE_EVIA_ACCESS_TOKEN=$VITE_EVIA_ACCESS_TOKEN" >> .env
          echo "VITE_API_ENDPOINT=$VITE_API_ENDPOINT" >> .env
          echo "VITE_WEBHOOK_URL=$VITE_WEBHOOK_URL" >> .env
          echo "VITE_SENDGRID_API_KEY=$VITE_SENDGRID_API_KEY" >> .env
          echo "VITE_EMAIL_FROM=$VITE_EMAIL_FROM" >> .env
          echo "VITE_EMAIL_FROM_NAME=$VITE_EMAIL_FROM_NAME" >> .env
          echo "VITE_APP_BASE_URL=$VITE_APP_BASE_URL" >> .env
          echo "VITE_EMAIL_FUNCTION_URL=$VITE_EMAIL_FUNCTION_URL" >> .env
          echo "VITE_EMAIL_FUNCTION_KEY=$VITE_EMAIL_FUNCTION_KEY" >> .env
          npm run build
          
      - name: Verify build output
        run: |
          echo "Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "Build output directory 'dist' not found!"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Build output file 'dist/index.html' not found!"
            exit 1
          fi
          echo "Build output verified successfully."
          
      - name: Prepare deployment files
        run: |
          # Create a folder for the web files
          mkdir -p webroot
          
          # Copy the build output into webroot
          cp -r dist/* webroot/
          
          # Create startup script
          cat << 'EOF' > startup.sh
          #!/bin/bash
          set -e
          
          cd /home/site/wwwroot/webroot
          
          # Debug: Print current directory and contents
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Debug: Print environment variables (masking sensitive values)
          echo "Environment variables:"
          env | grep -E 'VITE_|APPSETTING_' | sed 's/\(.*KEY=\).*/\1***/' | sed 's/\(.*SECRET=\).*/\1***/'
          
          # Create env-config.js with environment variables
          cat > env-config.js << 'EOF'
window._env_ = {
  VITE_SUPABASE_URL: "SUPABASE_URL_PLACEHOLDER",
  VITE_SUPABASE_ANON_KEY: "SUPABASE_ANON_KEY_PLACEHOLDER",
  VITE_SUPABASE_SERVICE_ROLE_KEY: "SUPABASE_SERVICE_ROLE_KEY_PLACEHOLDER",
  VITE_EVIA_SIGN_CLIENT_ID: "EVIA_SIGN_CLIENT_ID_PLACEHOLDER",
  VITE_EVIA_SIGN_CLIENT_SECRET: "EVIA_SIGN_CLIENT_SECRET_PLACEHOLDER",
  VITE_EVIA_ACCESS_TOKEN: "EVIA_ACCESS_TOKEN_PLACEHOLDER",
  VITE_API_ENDPOINT: "API_ENDPOINT_PLACEHOLDER",
  VITE_WEBHOOK_URL: "WEBHOOK_URL_PLACEHOLDER",
  VITE_SENDGRID_API_KEY: "SENDGRID_API_KEY_PLACEHOLDER",
  VITE_EMAIL_FROM: "EMAIL_FROM_PLACEHOLDER",
  VITE_EMAIL_FROM_NAME: "EMAIL_FROM_NAME_PLACEHOLDER",
  VITE_APP_BASE_URL: "APP_BASE_URL_PLACEHOLDER",
  VITE_EMAIL_FUNCTION_URL: "EMAIL_FUNCTION_URL_PLACEHOLDER",
  VITE_EMAIL_FUNCTION_KEY: "EMAIL_FUNCTION_KEY_PLACEHOLDER"
};

// URL validation and formatting
(function validateAndFormatURLs() {
  const urlKeys = ["VITE_SUPABASE_URL", "VITE_API_ENDPOINT", "VITE_WEBHOOK_URL", "VITE_APP_BASE_URL"];
  
  urlKeys.forEach(key => {
    let value = window._env_[key];
    
    // Skip if value is empty or undefined
    if (!value || value.includes("_PLACEHOLDER")) {
      console.warn(`Environment variable ${key} is empty or missing`);
      return;
    }

    // Remove any surrounding quotes
    value = value.replace(/^["']|["']$/g, '');
    
    // Ensure URL has protocol
    if (!value.match(/^https?:\/\//)) {
      value = "https://" + value;
    }

    // Validate URL
    try {
      new URL(value);
      window._env_[key] = value;
      console.log(`Validated URL for ${key}: ${value}`);
    } catch (e) {
      console.error(`Invalid URL for ${key}: ${value}`);
      // Don't set a fallback URL, let the application handle the error
    }
  });
})();

// Email configuration debug logging
(function() {
  console.log("Email Configuration:", {
    "VITE_SENDGRID_API_KEY": window._env_.VITE_SENDGRID_API_KEY && !window._env_.VITE_SENDGRID_API_KEY.includes("_PLACEHOLDER") ? "Present" : "Missing",
    "VITE_EMAIL_FROM": window._env_.VITE_EMAIL_FROM,
    "VITE_EMAIL_FROM_NAME": window._env_.VITE_EMAIL_FROM_NAME,
    "VITE_APP_BASE_URL": window._env_.VITE_APP_BASE_URL
  });
})();

// Email configuration validation
(function validateEmailConfig() {
  if (!window._env_.VITE_SENDGRID_API_KEY || window._env_.VITE_SENDGRID_API_KEY.includes("_PLACEHOLDER")) {
    console.error("SendGrid API Key is missing");
  }
  if (!window._env_.VITE_EMAIL_FROM || window._env_.VITE_EMAIL_FROM.includes("_PLACEHOLDER")) {
    console.error("From Email is missing");
  }
  if (!window._env_.VITE_EMAIL_FROM_NAME || window._env_.VITE_EMAIL_FROM_NAME.includes("_PLACEHOLDER")) {
    console.error("From Name is missing");
  }
  if (!window._env_.VITE_APP_BASE_URL || window._env_.VITE_APP_BASE_URL.includes("_PLACEHOLDER")) {
    console.error("App Base URL is missing");
  }
})();

// Log environment variables for debugging
console.log("Environment variables loaded:", {
  VITE_SUPABASE_URL: window._env_.VITE_SUPABASE_URL,
  VITE_API_ENDPOINT: window._env_.VITE_API_ENDPOINT,
  VITE_WEBHOOK_URL: window._env_.VITE_WEBHOOK_URL,
  VITE_APP_BASE_URL: window._env_.VITE_APP_BASE_URL,
  VITE_EMAIL_FROM: window._env_.VITE_EMAIL_FROM,
  VITE_EMAIL_FROM_NAME: window._env_.VITE_EMAIL_FROM_NAME,
  VITE_SUPABASE_ANON_KEY: "***",
  VITE_SENDGRID_API_KEY: "***",
  VITE_EVIA_SIGN_CLIENT_SECRET: "***"
});
EOF

          # Replace placeholders with actual environment variable values
          # This approach avoids issues with variable expansion in heredocs
          sed -i "s|SUPABASE_URL_PLACEHOLDER|${APPSETTING_VITE_SUPABASE_URL:-$VITE_SUPABASE_URL}|g" env-config.js
          sed -i "s|SUPABASE_ANON_KEY_PLACEHOLDER|${APPSETTING_VITE_SUPABASE_ANON_KEY:-$VITE_SUPABASE_ANON_KEY}|g" env-config.js
          sed -i "s|SUPABASE_SERVICE_ROLE_KEY_PLACEHOLDER|${APPSETTING_VITE_SUPABASE_SERVICE_ROLE_KEY:-$VITE_SUPABASE_SERVICE_ROLE_KEY}|g" env-config.js
          sed -i "s|EVIA_SIGN_CLIENT_ID_PLACEHOLDER|${APPSETTING_VITE_EVIA_SIGN_CLIENT_ID:-$VITE_EVIA_SIGN_CLIENT_ID}|g" env-config.js
          sed -i "s|EVIA_SIGN_CLIENT_SECRET_PLACEHOLDER|${APPSETTING_VITE_EVIA_SIGN_CLIENT_SECRET:-$VITE_EVIA_SIGN_CLIENT_SECRET}|g" env-config.js
          sed -i "s|EVIA_ACCESS_TOKEN_PLACEHOLDER|${APPSETTING_VITE_EVIA_ACCESS_TOKEN:-$VITE_EVIA_ACCESS_TOKEN}|g" env-config.js
          sed -i "s|API_ENDPOINT_PLACEHOLDER|${APPSETTING_VITE_API_ENDPOINT:-$VITE_API_ENDPOINT}|g" env-config.js
          sed -i "s|WEBHOOK_URL_PLACEHOLDER|${APPSETTING_VITE_WEBHOOK_URL:-$VITE_WEBHOOK_URL}|g" env-config.js
          sed -i "s|SENDGRID_API_KEY_PLACEHOLDER|${APPSETTING_VITE_SENDGRID_API_KEY:-$VITE_SENDGRID_API_KEY}|g" env-config.js
          sed -i "s|EMAIL_FROM_PLACEHOLDER|${APPSETTING_VITE_EMAIL_FROM:-$VITE_EMAIL_FROM}|g" env-config.js
          
          # Special handling for EMAIL_FROM_NAME to handle quotes properly
          EMAIL_FROM_NAME_VALUE="${APPSETTING_VITE_EMAIL_FROM_NAME:-$VITE_EMAIL_FROM_NAME}"
          # Remove any existing quotes for consistent handling
          EMAIL_FROM_NAME_VALUE=$(echo "$EMAIL_FROM_NAME_VALUE" | sed 's/^["'"'"']//g' | sed 's/["'"'"']$//g')
          # Escape any special characters in the name
          EMAIL_FROM_NAME_VALUE=$(echo "$EMAIL_FROM_NAME_VALUE" | sed 's/[\/&]/\\&/g')
          sed -i "s/EMAIL_FROM_NAME_PLACEHOLDER/$EMAIL_FROM_NAME_VALUE/g" env-config.js
          
          sed -i "s|APP_BASE_URL_PLACEHOLDER|${APPSETTING_VITE_APP_BASE_URL:-$VITE_APP_BASE_URL}|g" env-config.js
          sed -i "s|EMAIL_FUNCTION_URL_PLACEHOLDER|${APPSETTING_VITE_EMAIL_FUNCTION_URL:-$VITE_EMAIL_FUNCTION_URL}|g" env-config.js
          sed -i "s|EMAIL_FUNCTION_KEY_PLACEHOLDER|${APPSETTING_VITE_EMAIL_FUNCTION_KEY:-$VITE_EMAIL_FUNCTION_KEY}|g" env-config.js
          
          # Debug the generated file
          echo "Generated env-config.js:"
          cat env-config.js
          
          # Install serve if not already installed
          if ! command -v serve &> /dev/null; then
            echo "Installing serve..."
            npm install -g serve
          fi
          
          # Start the server from the webroot directory
          echo "Starting server..."
          exec serve -s . -l 8080
          EOF
          
          chmod +x startup.sh
          
          # Create web.config in webroot
          cat << 'EOF' > webroot/web.config
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="StaticFileModuleHtml" path="*.html" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleJs" path="*.js" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
                <add name="StaticFileModuleCss" path="*.css" verb="*" modules="StaticFileModule" resourceType="File" requireAccess="Read" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="React Routes" stopProcessing="true">
                    <match url=".*" />
                    <conditions logicalGrouping="MatchAll">
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                      <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="/" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <mimeMap fileExtension=".json" mimeType="application/json" />
                <mimeMap fileExtension=".webmanifest" mimeType="application/manifest+json" />
              </staticContent>
            </system.webServer>
          </configuration>
          EOF

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: |
            webroot/
            startup.sh
            !node_modules/
            !src/
            !.git/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Verify deployment files
        run: |
          echo "Checking deployment files:"
          ls -la
          echo "Ensuring startup script is executable:"
          chmod +x startup.sh
          
      - name: Verify deployment files detailed
        run: |
          echo "Checking deployment files:"
          ls -la
          echo "Checking startup script content:"
          cat startup.sh
          echo "Ensuring startup script is executable:"
          chmod +x startup.sh
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EEDC2329EBDE4906AAD5DBEFBDBD8982 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B76BB5BB72494662B2E55987D0F9FEC7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_62093CB513E141DEBC62ACAB8F0862DB }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'khrental'
          slot-name: 'Production'
          package: .
          startup-command: '/home/site/wwwroot/startup.sh'

      - name: Test deployment and environment variables
        run: |
          echo "Testing deployment and environment variables..."
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Get the app URL
          APP_URL="https://khrentals.kubeira.com"
          echo "Testing application at: $APP_URL"
          
          # Test the main application
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)
          echo "Main application HTTP status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Warning: Main application not responding with 200 OK"
          fi
          
          # Test env-config.js
          ENV_CONFIG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/env-config.js)
          echo "env-config.js HTTP status: $ENV_CONFIG_STATUS"
          if [ "$ENV_CONFIG_STATUS" != "200" ]; then
            echo "Warning: env-config.js not accessible"
          fi
          
          # Check environment variables
          echo "Checking environment variables..."
          az webapp config appsettings list \
            --name khrental \
            --resource-group ThreeCreeks \
            --query "[?starts_with(name, 'VITE_')].{Name:name, Value:value}" \
            -o table
          
          # Fetch recent logs instead of tailing
          echo "Fetching recent application logs..."
          az webapp log download \
            --name khrental \
            --resource-group ThreeCreeks \
            --log-file logs.zip
          
          if [ -f logs.zip ]; then
            unzip -p logs.zip */docker.log | tail -n 50
            rm logs.zip
          fi

      - name: Verify deployment
        run: |
          echo "Deployment verification complete."
          echo "Please check the application at: https://khrentals.kubeira.com"
          echo "If you encounter any issues, check the Azure portal for detailed logs."
